
# Getters 

Sometimes we may need to compute derived state 
based on store state, for example filtering through 
a list of items and counting them:

computed: {
    doneTodosCount () {
        return this.$store.state.todos.filter(todo => todo.done).length
    }
}

If more than one component needs to make use of this, we have to either duplicate the function,
or extract it into a shared helper and import it in multiple places - both are less than ideal.



Vuex allows us to define "getters" in the store.
You can think of them as computed properties for stores.
Like computed properties, a getter's result is cached based on its dependencies, 
and will only re-evaluate when some of its dependencies have changed.

Getters will receive the state as their 1st argument:

const store = new Vuex.store({
    state: {
        todos: [
            { id: 1, text: '...', done: true },
            { id: 2, text: '...', done: false }
        ]
    },
    getters: {
        doneTodos: state => {
            return state.todos.filter(todo => todo.done)
        }
    }
})

## Property-Style Access

The getters will be exposed on the store.getters
object, and you access values as properties:

store.getters.doneTodos // -> [{ id: 1, text: '...', done: true }]

Getters will also receive other getters as the 2nd argument:

getters: {
  // ...
  doneTodosCount: (state, getters) => {
    return getters.doneTodos.length
  }
}

store.getters.doneTodosCount // -> 1

We can now easily make use of it inside any component:

computed: {
  doneTodosCount () {
    return this.$store.getters.doneTodosCount
  }
}
Note that getters accessed as properties are cached as part of Vue's reactivity system.


## The mapGetters Helper

The mapGetters helper simply maps store getters to local computed properties:

import { mapGetters } from 'vuex'

export default {
  // ...
  computed: {
    // mix the getters into computed with object spread operator
    ...mapGetters([
      'doneTodosCount',
      'anotherGetter',
      // ...
    ])
  }
}





