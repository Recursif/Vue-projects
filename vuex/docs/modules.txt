
## Modules

Due to using a single state tree,
all state of our application is contained inside one big object.

However, as our application grows in scale, the store can get really bloated.

To help with that, Vuex allows us to divide our store into modules.

Each module can contain its own state, mutations, actions, getters,
and even nested modules - it's fractal all the way down:

const moduleA = {
  state: { ... },
  mutations: { ... },
  actions: { ... },
  getters: { ... }
}

const moduleB = {
  state: { ... },
  mutations: { ... },
  actions: { ... }
}

const store = new Vuex.Store({
  modules: {
    a: moduleA,
    b: moduleB
  }
})

store.state.a // -> `moduleA`'s state
store.state.b // -> `moduleB`'s state