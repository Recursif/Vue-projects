
## Get Started


At the center of every Vuex application
is the store.

A "store" is basically a container
that holds your application state.

There are two things that make
a Vuex store different from a
plain global object:

Vuex stores are reactive.
When Vue components retrieve state from it,
they will reactively and efficiently update if the 
store's state changes.

You cannot directly mutate the store's state.
The only way to change a store's state is 
by explicitly commiting mutations.

This ensures every state change leaves a 
track-able record, and enables tooling that helps 
us better understand our apps.


## The simplest Store 

It is pretty straightforward - just provide an initial state object, and some mutations:

// Make sure to call Vue.use(Vuex) first if using a module system
Vue.use(Vuex)

const store = new Vuex.Store({
    state: {
        count: 0
    },
    mutations: {
        increment (state) {
            state.count++
        }
    }
})


Now you can access the state object 
as store.state, and trigger a state 
change with the store.commit method:

store.commit('increment')
store.commit('increment')
store.commit('increment')

console.log(store.state.count)

Again, the reason we are committing a mutation instead of changing store.state.count directly, is because we want to explicitly track it. 
This simple convention makes your intention more explicit, 
so that you can reason about state changes in your app better when reading the code.

In addition, this gives us the opportunity to implement tools that can log every mutation, take state snapshots, or even perform time travel debugging.

Triggering changes simply means committing mutations in component methods.
