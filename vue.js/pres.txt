
# Vue.js

The Progressive Javascript Framework


## Approachable 

Already know HTML, CSS and JavaScript?
Read the guide and start building things in no time!


## Versatile 

An incementally adoptable ecosystem that 
scales between a library and a full-featured framework.


## Performant 

20KB min+gzip Runtime 
Blazing Fast Virtual DOM 
Minimal Optimization Efforts


## Install 

npm i vue


## Terms 

Full: builds that contain both the compiler and the runtime.

Compiler: code that is responsible for compiling template strings 
into JavaScript render functions.


Runtime: code that is responsible for creating Vue instances,
rendering and patching virtual DOM,... 

Basically everything minus the compiler.


UMD: UMD builds can be used directly in the browser via a <script> tag.

The default file from jsDelivr CDN at 
https://cdn.jsdelivr.net/npm/vue is the Runtime + Compiler UMD build (vue.js).


CommonJS: CommonJs builds are intended for use with older bundlers like 
browserify or webpack 1. 
The default file for these bundlers (pkg.main) is the Runtime only CommonJs build 
(vue.runtime.common.js)

ES Module: ES module builds are intende for use with modern bundlers like webpack 2 or rollup.
The default file for these bundlers (pkg.module) is the Runtime only ES Module 
build (vue.runtime.esm.js)


## Runtime + Compiler vs Runtime-only

If you need to compile templates on the client (e.g. passing a string to the template option
or mounting to an element using its in-DOM HTML as the template),
you will need the compiler and thus the full build:

// this requires the compiler 
new Vue ({
    template: '<div>{{ hi }}</div>'
})

// this does not 
new Vue({
    render(h) {
        return h('div', this.hi)
    }
})


When using vue-loader or vueify, templates inside *.vue files
are pre-compiled into JS at build time.

You don't really need the compiler in the final bundle,
and can therefore use the runtime-only.

Since the runtime-only builds are roughly 30% lighter-weight than their full-build counterparts,
you should use it whenever you can.

If you still wish to use the full build instead, you need to 
configure an alias in your bundler:


### Webpack 

module.exports = {
    // ... 
    resolve: {
        alias: {
            'vue$: 'vue/dist/vue.esm.js' // 'vue/dist/vue.common.js' for webpack 1
        }
    }
}


## Dev vs Prod Mode 

Development/production modes are hard-coded for the UMD builds: 

CommonJS and ES Module builds also preserve raw checks for process.env.NODE_ENV to determine the mode they should run in. 



Webpack
In Webpack 4+, you can use the mode option:

module.exports = {
  mode: 'production'
}